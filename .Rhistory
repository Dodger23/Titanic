training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
#testing = testing[,which(names(testing) %in% c )]
set.seed(500)
classifier = svm( Survived ~ .,
data = training,
type = 'C-classification',
kernel = 'linear')
classifier
p = predict(classifier , testing)
print(c(length(p) , nrow(testing)))
#confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
set.seed(500)
classifier = svm( Survived ~ .,
data = training,
type = 'C-classification',
kernel = 'linear')
classifier
p = predict(classifier , testing)
#confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
set.seed(500)
classifier = svm( Survived ~ .,
data = training,
type = 'C-classification',
kernel = 'linear')
classifier
p = predict(classifier , testing)
confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
set.seed(500)
#classifier = svm( Survived ~ .,
#                 data = training,
#                 type = 'C-classification',
#                 kernel = 'linear')
tCall = trainControl(method = "cv" , number = 5)
classifier = train(Survived ~ . , method = "rpart" ,data = training  , tCall )
classifier
p = predict(classifier , testing)
confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
set.seed(500)
#classifier = svm( Survived ~ .,
#                 data = training,
#                 type = 'C-classification',
#                 kernel = 'linear')
tCall = trainControl(method = "cv" , number = 5)
classifier = train(Survived ~ . , method = "rpart" ,data = training  , trControl = tCall )
classifier
p = predict(classifier , testing)
confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived", "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
set.seed(500)
#classifier = svm( Survived ~ .,
#                 data = training,
#                 type = 'C-classification',
#                 kernel = 'linear')
tCall = trainControl(method = "cv" , number = 5)
classifier = train(Survived ~ . , method = "rpart" ,data = training  , trControl = tCall )
classifier
p = predict(classifier , testing)
confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
training =  ROSE(Survived ~ ., data = training, seed = 2)$data
head(training)
set.seed(500)
#classifier = svm( Survived ~ .,
#                 data = training,
#                 type = 'C-classification',
#                 kernel = 'linear')
tCall = trainControl(method = "cv" , number = 5)
classifier = train(Survived ~ . , method = "rpart" ,data = training  , trControl = tCall )
classifier
p = predict(classifier , testing)
confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
training =  ROSE(Survived ~ ., data = training, seed = 2)$data
tseting = OSE(Survived ~ ., data = testing, seed = 2)$data
head(training)
set.seed(500)
#classifier = svm( Survived ~ .,
#                 data = training,
#                 type = 'C-classification',
#                 kernel = 'linear')
tCall = trainControl(method = "cv" , number = 5)
classifier = train(Survived ~ . , method = "rpart" ,data = training  , trControl = tCall )
classifier
p = predict(classifier , testing)
confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
training =  ROSE(Survived ~ ., data = training, seed = 2)$data
tseting = ROSE(Survived ~ ., data = testing, seed = 2)$data
head(training)
set.seed(500)
#classifier = svm( Survived ~ .,
#                 data = training,
#                 type = 'C-classification',
#                 kernel = 'linear')
tCall = trainControl(method = "cv" , number = 5)
classifier = train(Survived ~ . , method = "rpart" ,data = training  , trControl = tCall )
classifier
p = predict(classifier , testing)
confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
library(caret) ; library(ggplot2) ; library(ROSE) ; library(rpart) ; library(e1071)
set.seed(333)
data = read.csv("train.csv")
TEST = read.csv("test.csv")
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
#training = data
names(training)
training = training[, - c(1,4)]
testing = testing[, -c(1 , 4)]
training$Survived = as.factor(training$Survived)
testing$Survived = as.factor(testing$Survived)
if(FALSE)
{
data.rose <- ROSE(Survived ~ ., data = training, seed = 2)$data
testing = ROSE(Survived ~ . , data = testing , seed = 2 )$data
table(TEST$Sex)
table(data.rose$Sex)
tree.rose <- rpart(Survived ~ .  , data = data.rose)
pred.tree.rose <- predict(tree.rose, newdata = testing)
#pred.tree.rose  = c(pred.tree.rose , 1)
#print(c(nrow(TEST) , length(pred.tree.rose)))
#pred.tree.rose - 1
roc.curve(testing$Survived, pred.tree.rose[,2])
#pred.tree.rose
#confusionMatrix(pred.tree.rose , testing$Survived)
}
#Ticket
#Fare
#Sibsp
#Parch
c = c("Survived" , "Sex" , "Ticket" , "SibSp" , "Parch" , "Fare")
training = training[, which(names(training) %in% c ) ]
testing = testing[,which(names(testing) %in% c )]
set.seed(500)
#classifier = svm( Survived ~ .,
#                 data = training,
#                 type = 'C-classification',
#                 kernel = 'linear')
tCall = trainControl(method = "cv" , number = 5)
classifier = train(Survived ~ . , method = "rf" ,data = training  , trControl = tCall )
classifier
p = predict(classifier , testing)
confusionMatrix(p , testing$Survived)
if(FALSE)
{
TEST$PassengerId = pid
TEST$Survived = pred.tree.rose
TEST = TEST[,c("PassengerId" , "Survived")]
write.csv(TEST , file = "solution.csv" , row.names = FALSE)
}
