data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
#png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "scatter" ,
auto.key = list(columns = 2)
)
#dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv")
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "scatter" ,
auto.key = list(columns = 2)
)
dev.off()
}
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
explore(training)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv" , na.strings = c("NA" ,""))
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "scatter" ,
auto.key = list(columns = 2)
)
dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv" , na.strings = c("NA" ,""))
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "pairs" ,
auto.key = list(columns = 2)
)
dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv" , na.strings = c("NA" ,""))
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
#png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "pairs" ,
auto.key = list(columns = 2)
)
#dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv" , na.strings = c("NA" ,""))
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
#png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "pairs" ,
auto.key = list(columns = 2)
)
#dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv" , na.strings = c("NA" ,""))
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
#png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
p = featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "pairs" ,
auto.key = list(columns = 2)
)
print(p)
#dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv" , na.strings = c("NA" ,""))
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
#png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
p = featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "pairs" ,
auto.key = list(columns = 2)
)
print(p)
#dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv" , na.strings = c("NA" ,""))
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
#png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
p = featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "pairs" ,
auto.key = list(columns = 2)
)
print(p)
#dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
library(caret)
library(ROSE)
library(rpart)
library(e1071)
set.seed(333)
data = read.csv("data/train.csv" , na.strings = c("NA" , ""))
TEST = read.csv("data/test.csv" , na.strings = c("NA" ,""))
clean = function(data)
{
data$Survived = as.factor(data$Survived)
c= c("Name" , "PassengerId"  , "Cabin")
data = data[, -which(names(data) %in% c )]
data[is.na(data$Age) , "Age"] = median(data$Age , na.rm = TRUE)
data[is.na(data$Embarked) , "Embarked"] = levels(data$Embarked)[runif(1 , 1 , 3)]
data
}
explore = function (data)
{
str(data)
find_na = apply(is.na(data),2,sum)
find_na_percent = apply(is.na(data) , 2 , sum  ) / nrow(data) *100
c = names(find_na)[find_na > 0]
print(find_na[ which(names(find_na) %in% c )] )
print(find_na_percent[ which(names(find_na_percent) %in% c )])
data = clean(data)
png(filename = "images/featuresPlot.png" , width = 1366 , height = 768 , units = "px")
p = featurePlot(x = data[,-which(names(data) %in% c("Ticket" , "Survived"))] ,y = data[,1] ,
plot = "pairs" ,
auto.key = list(columns = 2)
)
print(p)
dev.off()
}
explore(data)
inTrain = createDataPartition(data$Survived , p = 0.75 , list = FALSE)
training = data[inTrain , ]
testing = data[-inTrain , ]
training = clean(training)
testing = clean(testing)
support_vectors_machine = function(training , testing)
{
set.seed(555)
modelFit = svm(Survived ~ . ,
data = training,
type = 'C-classification',
kernel = 'linear'
)
modelFit
pred = predict(modelFit , testing)
print(confusionMatrix(pred , testing$Survived) )
confusionMatrix(pred , testing$Survived)$overall[1] *100
}
#support_vectors_machine(training , testing)
